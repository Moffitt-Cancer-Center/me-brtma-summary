---
title: "ME-BRTMA Analysis"
format: 
  html:
    embed-resources: true
    code-fold: true
    toc: true
    grid:
      body-width: 1000px
---


# Overview

The goal of this document is to generate the findings for the ME-BRTMA paper for ER, PR, HER2, Ki67 and PAM50 scores. Of note, the data has been pre-processed via R script in the directory `data-raw`, resulting in a
table `data/brtma.rds` that will be used for figures/graphs in this document.


# TMA Cohort
```{r}
#| label: setup

pkgload::load_all(quiet=TRUE)

# brtma is all breast tumor cores
brtma <- readRDS(here::here("data/brtma.rds"))

# full_tma includes all non-tumor/non-breast cores, etc.
full_tma <- readRDS(here::here("data/full_tma.rds"))

# pdata is the clinical data available
clinical_data<-readRDS(here::here("data/clinical_data.rds"))




# Since patients have multiple breast cancer cores, we can
# summarize the overall results by patient. Included are the
# min/max evaluation for er/pr/her2.
brtma_core_by_patient <- brtma |>
  dplyr::group_by(study_patient_id) |>
  dplyr::summarize(
    cohort = unique(cohort),
    
    er_number_of_cores = length(na.omit(er_category)),
    er_category_min = fct_min(er_category),
    er_category_max = fct_max(er_category),
    
    pr_number_of_cores = length(na.omit(pr_category)),
    pr_category_min = fct_min(pr_category),
    pr_category_max = fct_max(pr_category),

    her2_number_of_cores = length(na.omit(her2_category)),
    her2_category_min = fct_min(her2_category),
    her2_category_max = fct_max(her2_category),
    
    ki67_number_of_cores = length(na.omit(ki67_percent_positive)),
    ki67_min = ifelse(
      ki67_number_of_cores > 0,
      min(ki67_percent_positive,na.rm=TRUE),
      NA
    ),
    ki67_max = ifelse(
      ki67_number_of_cores > 0,
      max(ki67_percent_positive, na.rm=TRUE),
      NA
    ),
    ki67_diffs = ki67_max-ki67_min
  ) |>
  # Convert min/max levels into factors with the corresponding levels (for sorting)
  dplyr::mutate(
    er_category_min = factor(er_category_min, levels = levels(brtma$er_category)),
    er_category_max = factor(er_category_max, levels(brtma$er_category)),
    pr_category_min = factor(pr_category_min, levels = levels(brtma$pr_category)),
    pr_category_max = factor(pr_category_max, levels = levels(brtma$pr_category)),
    her2_category_min = factor(her2_category_min, levels = levels(brtma$her2_category)),
    her2_category_max = factor(her2_category_max, levels = levels(brtma$her2_category))
  )
```


## Overall TMA Characteristics
There is limited clinical information used in this paper for the cohort, however we can assemble the number of patients per cohort and number of cores of various types.

```{r}
#| label: tbl-tma-summary
#| tbl-cap: Overall summary of the full TMA (all cores).

pts_per_cohort <- full_tma |>
  # Filtering by control subsets to only breast tissue-related patients
  dplyr::filter(!is_control) |>
  dplyr::select(cohort, study_patient_id) |>
  dplyr::distinct() |>
  dplyr::count(by=cohort) |>
  dplyr::rename(Cohort = by) |>
  gt::gt()
pts_per_cohort
```

```{r}
#| label: tbl-basic-tma-stats
#| tbl-cap: Overall statistics of the constructed TMA.


# Breakdown of cores (by TMA) and total number of cores
gtsummary::tbl_summary(full_tma, include=c("tma_number")) |>
  gtsummary::modify_header("label" ~ "**Number of Cores**")
```

```{r}
#| label: tbl-tma-tissue-vs-diagnosis
#| tbl-cap: Counts of tissue types and diagnosis of tissue.
                       
gtsummary::tbl_summary(full_tma, include=c("tissue"),by="diagnosis")

```

```{r}
#| label: tbl-diagnosis-by-cohort
#| tbl-cap: Count of tissues by diagnosis type, by cohort.
gtsummary::tbl_summary(full_tma, by="diagnosis", include="cohort") |>
  gtsummary::add_overall()
```


## Breast Cancer-specific TMA Characteristics
We provide an overview of all of the scores used in the paper separated out by cohort (@tbl-overall-summary).

```{r}
#| label: tbl-overall-summary
#| tbl-cap: Overall summary of ER/PR/HER2 and combinations of stains (clinical and TMA).
gtsummary::tbl_summary(
  brtma,
  include = c(
    "er_percent_positive",
    "er_category",
    "Clinical ER",
    "pr_percent_positive",
    "pr_category",
    "Clinical PR",
    "hr_category",
    "Clinical HR",
    "her2_score",
    "her2_category",
    "Clinical HER2 IHC",
    "tnbc_category",
    "Clinical TNBC",
    "ki67_percent_positive",
    "ki67_category"
  ),
  by = "cohort"
) |>
  gtsummary::add_n() |>
  gtsummary::add_p(test.args=list(
    # The parameters below allow the fisher's exact test to succeed,
    # however these are rather large. For the sake of performance,
    # we instead just use simulations.
    #"tnbc_category" ~ list(workspace=2e7),
    #"Clinical TNBC" ~ list(workspace=2e8)
    "tnbc_category" ~ list(simulate.p.value=TRUE, B = 10000),
    "Clinical TNBC" ~ list(simulate.p.value=TRUE, B = 10000)
  ))

```

## Clinical Data

We have some basic clinical data elements available currently for this cohort, which is summarized below in terms of outcomes, followup and key clinical/demographic information. Note that the followup uses the reverse-km approach for estimating median followup time. Both the 36month and 60 month overall survival estimates are provided.


```{r}
#| label: tbl-summary-tableone
#| tbl-cap: Summary of basic information about BRTMA cohort.

gtsummary::tbl_summary(
  clinical_data, 
  by="cohort",
  include=c(
    "age_at_diagnosis",
    "pathology_t_stage",
    "grade_differentiation",
    "clinical_tumor_size"
  ),
  label = list(
    age_at_diagnosis = "Age at Diagnosis",
    pathology_t_stage = "T Stage (pathology)",
    grade_differentiation = "Grade",
    clinical_tumor_size = "Tumor Size (cm)"
  ),
  missing_text = "Unknown/Missing"
) |> 
  gtsummary::add_p()



```


```{r}
#| label: tbl-outcomes
#| tbl-cap: Outcomes for ME-BRTMA by cohort. Note that the overall test for differences in overall survival is not significant (p = 0.1, Chiseq = 5.3, 3 degrees of freedom).

overall_differences <- survival::survdiff(os~cohort, data=clinical_data)

# Would like to report (by cohort)
#   36/60mo survival
#   median followup time (rev km method)
#   
summary_outcomes <-clinical_data |>
  dplyr::group_by(cohort) |>
  dplyr::summarize(
    OS_36mo = list(summary(survival::survfit(os~1),times=36)),
    OS_36mo_survival = 100 * OS_36mo[[1]]$surv,
    OS_36mo_lower_ci = 100 * OS_36mo[[1]]$lower,
    OS_36mo_upper_ci = 100 * OS_36mo[[1]]$upper,
     
    OS_60mo = list(summary(survival::survfit(os~1), times = 60)),
    OS_60mo_survival = 100 * OS_60mo[[1]]$surv,
    OS_60mo_lower_ci = 100 * OS_60mo[[1]]$lower,
    OS_60mo_upper_ci = 100 * OS_60mo[[1]]$upper,
    
    followup_summary = list(surv_median(survival::survfit(followup~1))),
    followup_median = followup_summary[[1]][["median"]],
    followup_median_lower_ci = followup_summary[[1]][["0.95LCL"]],
    followup_median_upper_ci = followup_summary[[1]][["0.95UCL"]]
  ) |>
  dplyr::mutate(
    Cohort = cohort,
    `36mo OS` = sprintf(
      "%3.1f%% (%2.0f-%2.0f)",
      OS_36mo_survival, 
      OS_36mo_lower_ci,
      OS_36mo_upper_ci
    ),
    `60mo OS` = sprintf(
      "%3.1f%% (%2.0f-%2.0f)",
      OS_60mo_survival, 
      OS_60mo_lower_ci,
      OS_60mo_upper_ci
    ),
    `Median Followup (months)` = sprintf(
      "%3.0f (%2.0f-%2.0f)",
      followup_median, 
      followup_median_lower_ci,
      followup_median_upper_ci
    )      
  )


# Pretty print summary_outcomes

gt::gt(
  dplyr::select(
    summary_outcomes, 
    Cohort, 
    `36mo OS`, 
    `60mo OS`,
    `Median Followup (months)`)
)
```


# ER

The ER categorization is shown with respect to cohorts in @tbl-er-summary. A stacked barplot of the proportions of each ER category
are shown (by cohort) in @fig-er-barplot. The comparison of the Clinical ER calls vs. the TMA stain evaluation is shown in @tbl-clinical-er-vs-tma. The Cohen's kappa for clinical vs. TMA evaluation indicates good agreement (see below).

```{r}
vcd::Kappa(table(na.omit(data.frame(brtma$er_category, brtma$`Clinical ER`))))
```

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.




## Summary of ER Evaluation
```{r}
#| label: tbl-er-summary
#| tbl-cap: Summary of ER stain evaluation by cohort.
#| 

er_summary_table <- gtsummary::tbl_summary(
  brtma, 
  by="cohort", 
  include="er_category",
  label=list("er_category"="ER"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_p() 

er_summary_table

```

```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  er_summary_table, 
  file = here::here("delivery/er_summary_table.xlsx")
)
gtsummary::as_flex_table(er_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/er_summary_table.docx"))
```

## Barplot of ER Frequencies
```{r}
#| label: fig-er-barplot
#| fig-cap: Barplot of frequencies of ER status based on cohort.


p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, er_category),
  ggplot2::aes(x=cohort,fill=er_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("ER Expression per cohort") +
  ggplot2::labs(caption = "p = 0.001, Fisher's exact test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )

p
```

```{r}
png(file = here::here("delivery/er_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/er_summary_barplot.pdf"))
p
invisible(dev.off())
```


## Clinical ER call vs TMA stain
```{r}
#| label: tbl-clinical-er-vs-tma
#| tbl-cap: Comparison of Clinical ER calls vs. TMA stain evaluations.

er_vs_clinical_table <- brtma |>
  dplyr::filter(!is.na(er_category), !is.na(`Clinical ER`))

er_clinical_vs_tma <- gtsummary::tbl_summary(
  er_vs_clinical_table,
  include = "er_category",
  by = "Clinical ER",
  label = list("er_category"="Individual Core ER Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical ER Result**"
  ) |>
  gtsummary::bold_labels() 



er_clinical_vs_tma 
```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  er_clinical_vs_tma , 
  file = here::here("delivery/er_clinical_vs_tma.xlsx")
)
gtsummary::as_flex_table(er_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/er_clinical_vs_tma.docx"))
```


## Simplified ER
The classification of ER stains as negative, low positive, and positive is a new
development for diagnostic purposes. Our existing clinical classifications do not
include this level of resolution, therefore we can compare the simplified ER
stain results to the clinical ER status. Note we also remove the equivocal from
the clinical results.

```{r}
cliner <- dplyr::filter(brtma, !`Clinical ER`=="Equivocal") |>
  dplyr::mutate(`Clinical ER` = forcats::fct_drop(`Clinical ER`))


vcd::Kappa(table(na.omit(data.frame(cliner$er_simple_category , cliner$`Clinical ER`))))
```


### Clinical ER call vs Simplified TMA stain
```{r}
#| label: tbl-clinical-er-vs-tma-simplified
#| tbl-cap: Comparison of Clinical ER calls vs. TMA stain evaluations (simplified).

er_vs_clinical_table <- brtma |>
  dplyr::filter(
    !is.na(er_simple_category),
    !is.na(`Clinical ER`), 
    !`Clinical ER`=="Equivocal"
  ) |>
  dplyr::mutate(`Clinical ER`=forcats::fct_drop(`Clinical ER`))

er_clinical_vs_tma <- gtsummary::tbl_summary(
  er_vs_clinical_table,
  include = "er_simple_category",
  by = "Clinical ER",
  label = list("er__simple_category"="Individual Core ER Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical ER Result**"
  ) |>
  gtsummary::bold_labels() 



er_clinical_vs_tma 
```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  er_clinical_vs_tma , 
  file = here::here("delivery/er_clinical_vs_tma_simplified.xlsx")
)
gtsummary::as_flex_table(er_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/er_clinical_vs_tma_simplified.docx"))
```

## Variation of ER across TMA cores
Patient cores can vary in terms of overall content (for tumor cores). Therefore we compare the ER scores by considering the "lowest" scoring tumor core vs. the "highest" scoring tumor core across the TMA. In the case of only one tumor core, the result for high/low are the same. Note there are 159 total patients on the TMA.

```{r}
#| label: tbl-er-cross
#| tbl-cap: Agreement of tumor cores for same patient in TMA. The lowest ER score (rows) and highest ER score (columns) are compared across patients. One expects a large number of counts along the diagonal. 
#| 
gtsummary::tbl_cross(
  brtma_core_by_patient,
  row = "er_category_min",
  col = "er_category_max",
  label = list(
    er_category_min="Lowest ER Score",
    er_category_max="Highest ER Score"
  )
)


```

We can also examine the number of cores/patient. Note that each stain may have failures, resulting in 0 cores for a specific stain for a specific patient or in the case of two patients, no viable cores.
```{r}
#| label: tbl-er-num-cores
#| tbl-cap: Summary of number of ER-stained cores per patient (by cohort). Note that some may have no cores, as these patients only have PR/HER2 stains successfully called. In the case of two patients (37, 167) there were no viable cores.

gtsummary::tbl_summary(
  brtma_core_by_patient, 
  include="er_number_of_cores",
  by="cohort",
  label = list(er_number_of_cores="ER Cores/Patient")
) |>
  gtsummary::add_overall()
```


# PR

The PR categorization is shown with respect to cohorts in @tbl-pr-summary. A stacked barplot of the proportions of each PR category
are shown (by cohort) in @fig-pr-barplot. The comparison of the Clinical PR calls vs. the TMA stain evaluation is shown in @tbl-clinical-pr-vs-tma. The Cohen's kappa for clinical vs. TMA evaluation indicates modest agreement (see below).

```{r}
vcd::Kappa(table(na.omit(data.frame(brtma$pr_category, brtma$`Clinical PR`))))
```

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.





## Summary of PR Evaluation
```{r}
#| label: tbl-pr-summary
#| tbl-cap: Summary of PR stain evaluation by cohort.


pr_summary_table <- gtsummary::tbl_summary(
  brtma, 
  by="cohort", 
  include="pr_category",
  label=list("pr_category"="PR"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_p() 

pr_summary_table <- pr_summary_table |>
  gtsummary::modify_footnote(
    p.value =  sprintf("Pearson's Chi-squared test: statistic = %5.2f, degrees of freedom = %d",
    pr_summary_table$table_body$statistic[[1]],
    pr_summary_table$table_body$parameter[[1]]
    )
  )

     

pr_summary_table


```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  pr_summary_table, 
  file = here::here("delivery/pr_summary_table.xlsx")
)
gtsummary::as_flex_table(pr_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/pr_summary_table.docx"))
```

## Barplot of PR Frequencies
```{r}
#| label: fig-pr-barplot
#| fig-cap: Barplot of frequencies of PR status based on cohort.


p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, pr_category),
  ggplot2::aes(x=cohort,fill=pr_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("PR Expression per cohort") +
  ggplot2::labs(caption = "p = 0.003, Chi squared test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )


p

```


```{r}
png(file = here::here("delivery/pr_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/pr_summary_barplot.pdf"))
p
invisible(dev.off())
```

## Clinical PR call vs TMA stain

```{r}
#| label: tbl-clinical-pr-vs-tma
#| tbl-cap: Comparison of Clinical PR calls vs. TMA stain evaluations.

pr_vs_clinical_table <- brtma |>
  dplyr::filter(!is.na(pr_category), !is.na(`Clinical PR`))

pr_clinical_vs_tma <- gtsummary::tbl_summary(
  pr_vs_clinical_table,
  include = "pr_category",
  by = "Clinical PR",
  label = list("pr_category"="Individual Core PR Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical PR Result**"
  ) |>
  gtsummary::bold_labels() 


pr_clinical_vs_tma 
```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  pr_clinical_vs_tma , 
  file = here::here("delivery/pr_clinical_vs_tma.xlsx")
)
gtsummary::as_flex_table(pr_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/pr_clinical_vs_tma.docx"))
```


## Variation of PR across TMA cores
Patient cores can vary in terms of overall content (for tumor cores). Therefore we compare the PR scores by considering the "lowest" scoring tumor core vs. the "highest" scoring tumor core across the TMA. In the case of only one tumor core, the result for high/low are the same. Note there are 159 total patients on the TMA.

```{r}
#| label: tbl-pr-cross
#| tbl-cap: Agreement of tumor cores for same patient in TMA. The lowest PR score (rows) and highest PR score (columns) are compared across patients. One expects a large number of counts along the diagonal. 
#| 
gtsummary::tbl_cross(
  brtma_core_by_patient,
  row = "pr_category_min",
  col = "pr_category_max",
  label = list(
    pr_category_min="Lowest PR Score",
    pr_category_max="Highest PR Score"
  )
)


```

We can also examine the number of cores/patient. Note that each stain may have failures, resulting in 0 cores for a specific stain for a specific patient or in the case of two patients, no viable cores.
```{r}
#| label: tbl-pr-num-cores
#| tbl-cap: Summary of number of PR-stained cores per patient (by cohort). Note that some may have no cores, as these patients only have ER/HER2 stains successfully called. In the case of two patients (37, 167) there were no viable cores.

gtsummary::tbl_summary(
  brtma_core_by_patient, 
  include="pr_number_of_cores",
  by="cohort",
  label = list(pr_number_of_cores="PR Cores/Patient")
) |>
  gtsummary::add_overall()
```



# HR (Hormone Recepter: ER and PR)


We can combine together the ER/PR status into a "HR" status, namely a hormone receptor status. Note the approach is that if either ER or PR is positive (even in the case that the other call is missing), then the case is HR+. The HR categorization is shown with respect to cohorts in @tbl-hr-summary. A stacked barplot of the proportions of each HR category
are shown (by cohort) in @fig-hr-barplot. The comparison of the Clinical HR calls vs. the TMA stain evaluation is shown in @tbl-clinical-hr-vs-tma. The Cohen's kappa for clinical vs. TMA evaluation indicates good agreement (see below).

```{r}
vcd::Kappa(table(na.omit(data.frame(brtma$hr_category, brtma$`Clinical HR`))))
```

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.



## Summary of HR Evaluation
```{r}
#| label: tbl-hr-summary
#| tbl-cap: Summary of HR (TMA) evaluation by cohort.


hr_summary_table <- gtsummary::tbl_summary(
  brtma, 
  by="cohort", 
  include="hr_category",
  label=list("hr_category"="HR"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_p() 

hr_summary_table <- hr_summary_table |>
  gtsummary::modify_footnote(
    p.value =  sprintf("Pearson's Chi-squared test: statistic = %5.2f, degrees of freedom = %d",
    hr_summary_table$table_body$statistic[[1]],
    hr_summary_table$table_body$parameter[[1]]
    )
  )

     

hr_summary_table


```


```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  hr_summary_table, 
  file = here::here("delivery/hr_summary_table.xlsx")
)
gtsummary::as_flex_table(hr_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/hr_summary_table.docx"))
```

## Barplot of HR Frequencies
```{r}
#| label: fig-hr-barplot
#| fig-cap: Barplot of frequencies of HR status based on cohort.


p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, hr_category),
  ggplot2::aes(x=cohort,fill=hr_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("HR Expression per cohort") +
  ggplot2::labs(caption = "p = 0.006, Chi squared test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )


p

```


```{r}
png(file = here::here("delivery/hr_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/hr_summary_barplot.pdf"))
p
invisible(dev.off())
```

## Clinical HR call vs TMA stain

```{r}
#| label: tbl-clinical-hr-vs-tma
#| tbl-cap: Comparison of derived Clinical HR calls vs. derived TMA stain evaluations.


hr_vs_clinical_table <- brtma |>
  dplyr::filter(!is.na(hr_category), !is.na(`Clinical HR`))

hr_clinical_vs_tma <- gtsummary::tbl_summary(
  hr_vs_clinical_table,
  include = "hr_category",
  by = "Clinical HR",
  label = list("hr_category"="Individual Core HR Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical HR Result**"
  ) |>
  gtsummary::bold_labels() 


hr_clinical_vs_tma 
```


```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  hr_clinical_vs_tma , 
  file = here::here("delivery/hr_clinical_vs_tma.xlsx")
)
gtsummary::as_flex_table(hr_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/hr_clinical_vs_tma.docx"))
```



# HER2

The HER2 categorization is shown with respect to cohorts in @tbl-her2-summary. A stacked barplot of the proportions of each HER2 category
are shown (by cohort) in @fig-her2-barplot. The comparison of the Clinical HER2 calls vs. the TMA stain evaluation is shown in @tbl-clinical-her2-vs-tma. The Cohen's kappa for clinical vs. TMA evaluation indicates much lower agreement (see below).

```{r}
vcd::Kappa(table(na.omit(data.frame(brtma$her2_category, brtma$`Clinical HER2 IHC`))))
```

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.





## Summary of HER2 Evaluation
```{r}
#| label: tbl-her2-summary
#| tbl-cap: Summary of HER2 stain evaluation by cohort.


her2_summary_table <- gtsummary::tbl_summary(
  brtma, 
  by="cohort", 
  include="her2_category",
  label=list("her2_category"="HER2"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_p(pvalue_fun=gtsummary::label_style_pvalue(digits=3)) 

her2_summary_table <- her2_summary_table |>
  gtsummary::modify_footnote(
    p.value =  sprintf("Pearson's Chi-squared test: statistic = %5.2f, degrees of freedom = %d",
    her2_summary_table$table_body$statistic[[1]],
    her2_summary_table$table_body$parameter[[1]]
    )
  )

     

her2_summary_table


```


```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  her2_summary_table, 
  file = here::here("delivery/her2_summary_table.xlsx")
)
gtsummary::as_flex_table(her2_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/her2_summary_table.docx"))
```

## Barplot of HER2 Frequencies
```{r}
#| label: fig-her2-barplot
#| fig-cap: Barplot of frequencies of HER2 status based on cohort.

p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, her2_category),
  ggplot2::aes(x=cohort,fill=her2_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("HER2 Expression per cohort") +
  ggplot2::labs(caption = "p = 0.387, Chi squared test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )



p

```


```{r}
png(file = here::here("delivery/her2_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/her2_summary_barplot.pdf"))
p
invisible(dev.off())
```

## Clinical HER2 IHC call vs TMA stain

```{r}
#| label: tbl-clinical-her2-vs-tma
#| tbl-cap: Comparison of Clinical HER2 calls vs. TMA stain evaluations.


her2_vs_clinical_table <- brtma |>
  dplyr::filter(!is.na(her2_category), !is.na(`Clinical HER2 IHC`))

her2_clinical_vs_tma <- gtsummary::tbl_summary(
  her2_vs_clinical_table,
  include = "her2_category",
  by = "Clinical HER2 IHC",
  label = list("her2_category"="Individual Core HER2 Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical HER2 IHC Result**"
  ) |>
  gtsummary::bold_labels() 


her2_clinical_vs_tma 
```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  her2_clinical_vs_tma , 
  file = here::here("delivery/her2_clinical_vs_tma.xlsx")
)
gtsummary::as_flex_table(her2_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/her2_clinical_vs_tma.docx"))
```

## Variation of HER2 across TMA cores
Patient cores can vary in terms of overall content (for tumor cores). Therefore we compare the HER2 scores by considering the "lowest" scoring tumor core vs. the "highest" scoring tumor core across the TMA. In the case of only one tumor core, the result for high/low are the same. Note there are 159 total patients on the TMA.

```{r}
#| label: tbl-her2-cross
#| tbl-cap: Agreement of tumor cores for same patient in TMA. The lowest HER2 score (rows) and highest HER2 score (columns) are compared across patients. One expects a large number of counts along the diagonal. 
#| 
gtsummary::tbl_cross(
  brtma_core_by_patient,
  row = "her2_category_min",
  col = "her2_category_max",
  label = list(
    her2_category_min="Lowest HER2 Score",
    her2_category_max="Highest HER2 Score"
  )
)


```

We can also examine the number of cores/patient. Note that each stain may have failures, resulting in 0 cores for a specific stain for a specific patient or in the case of two patients, no viable cores.
```{r}
#| label: tbl-her2-num-cores
#| tbl-cap: Summary of number of HER2-stained cores per patient (by cohort). Note that some may have no cores, as these patients only have ER/PR stains successfully called. In the case of two patients (37, 167) there were no viable cores.

gtsummary::tbl_summary(
  brtma_core_by_patient, 
  include="her2_number_of_cores",
  by="cohort",
  label = list(her2_number_of_cores="HER2 Cores/Patient")
) |>
  gtsummary::add_overall()
```




# Ki67
We can examine Ki-67 levels, both as percent positive ( @tbl-ki67-basic-percent) and as a risk categorization based on existing literature (@tbl-ki67-basic-risk-table). The manuscript combines these two measures (percent positive and risk) into a single table (@tbl-ki67-risk-table). Risk categories for Ki-67 are shown as stacked barplots in @fig-ki67-barplot. The Ki-67 percent positivity can be seen by cohort in @fig-ki67-boxplot.

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.



## Summary of Ki67 Evaluation

### Basic Summary
```{r}
#| label: tbl-ki67-basic-percent
#| tbl-cap: Summary of percent positive Ki-67 across cohorts.
#| 
ki67_basic_table <- gtsummary::tbl_summary(
  brtma, include = "ki67_percent_positive", by = "cohort"
) |>
  gtsummary::add_n() |>
  gtsummary::add_p()

ki67_basic_table <- ki67_basic_table |>
  gtsummary::modify_footnote(
    p.value =  sprintf("Kruskal-Wallis rank sum test: chi-squared = %5.2f, degrees of freedom = %d",
            ki67_basic_table$table_body$statistic[[1]],
            ki67_basic_table$table_body$parameter[[1]]
    )
  )
ki67_basic_table
                       

```

```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  ki67_basic_table, 
  file = here::here("delivery/ki67_basic_table.xlsx")
)
gtsummary::as_flex_table(ki67_basic_table) |>
  flextable::save_as_docx(path=here::here("delivery/ki67_basic_table.docx"))
```

```{r}
#| label: tbl-ki67-basic-risk-table
#| tbl-cap: Summary of risk categorizations Ki-67 across cohorts.
#| 
ki67_basic_risk_table <- gtsummary::tbl_summary(
  brtma, 
  include="ki67_category", by="cohort"
) |>
  gtsummary::add_p() |>
  gtsummary::add_overall() 

ki67_basic_risk_table <- ki67_basic_risk_table |>
  gtsummary::modify_footnote(
    p.value =  sprintf("Chi-squared test: chi-squared = %5.2f, degrees of freedom = %d",
            ki67_basic_risk_table$table_body$statistic[[1]],
            ki67_basic_risk_table$table_body$parameter[[1]]
    )
  ) 

ki67_basic_risk_table |>
  gtsummary::as_gt() |>
  gt::tab_style(
    style = gt::cell_fill(color="lightgrey"), 
    locations=gt::cells_body(columns="stat_0")
  )

```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  ki67_basic_risk_table, 
  file = here::here("delivery/ki67_basic_risk_table.xlsx")
)
gtsummary::as_flex_table(ki67_basic_risk_table) |>
  flextable::save_as_docx(path=here::here("delivery/ki67_basic_risk_table.docx"))
```
### Advanced Summary
```{r}
#| label: tbl-ki67-risk-table
#| tbl-cap: Summary of risk categorizations Ki-67 across cohorts.
#| 


  
ki67_summary_table <- gtsummary::tbl_summary(
  brtma, include = c("ki67_percent_positive","ki67_category"), by = "cohort",
  type = gtsummary::all_continuous() ~ "continuous2",
  digits = list(gtsummary::all_continuous() ~ 2),
  label = list(ki67_percent_positive~"Statistics", ki67_category~"Risk Category"),
  missing_text = "Not Evaluable",
  statistic =
      gtsummary::all_continuous() ~ c(
        "{mean} ({sd})",
        "{median} ({p25}, {p75})"
      )
  )  |>
  gtsummary::modify_header(label="")  |>
  gtsummary::add_overall() |>
  gtsummary::bold_labels()  


ki67_summary_table |>
  gtsummary::as_gt() |>
  gt::tab_style(
    style = gt::cell_fill(color="lightgrey"), 
    locations=gt::cells_body(columns="stat_0")
  )
```



```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  ki67_summary_table, 
  file = here::here("delivery/ki67_summary_table.xlsx")
)
gtsummary::as_flex_table(ki67_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/ki67_summary_table.docx"))
```



## Barplot of Ki67 Risk Frequencies
```{r}
#| label: fig-ki67-barplot
#| fig-cap: Barplot of frequencies of Ki67 status based on cohort.

p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, ki67_category),
  ggplot2::aes(x=cohort,fill=ki67_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("Ki67 Risk Category per Cohort") +
  ggplot2::labs(caption = " p = 0.022, Chi squared test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )







p

```


```{r}
png(file = here::here("delivery/ki67_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/ki67_summary_barplot.pdf"))
p
invisible(dev.off())
```


## Boxplot of Ki67 positivity
```{r}
#| label: fig-ki67-boxplot
#| fig-cap: Boxplot of percent positive nuclei for Ki67 based on cohort.


p <- ggpubr::ggboxplot(
  tidyr::drop_na(brtma, ki67_percent_positive), 
  x = "cohort", y = "ki67_percent_positive", 
  fill = "cohort",  bxp.errorbar = TRUE,
  ylab = "Ki-67 Percent Positive Nuclei",
  palette = "Set1",
  xlab = "", na.rm = TRUE
) +
  ggplot2::theme(
    legend.position="none",
    text=ggplot2::element_text(size=16, face="bold",color="#000000"),
    axis.text=ggplot2::element_text(color="#000000")
  ) +
  ggplot2::labs(caption = "Kruskal-Wallis, p = 0.033") 
  

p

```


```{r}
png(file = here::here("delivery/ki67_summary_boxplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/ki67_summary_boxplot.pdf"))
p
invisible(dev.off())
```

## Ki67 vs. Clinical Subtypes
We can also look at ki67 percent positivity by clinical subtype (HR/HER2) by cohort.

```{r}
#| label: fig-ki67-subtype-cohort
#| fig-cap: Boxplot of ki67 percent positivity by clinical subtype and by cohort.

ggpubr::ggboxplot(
   tidyr::drop_na(brtma, ki67_percent_positive, tnbc_category), 
   x = "tnbc_category",
   y = "ki67_percent_positive",
   fill = "cohort",
   bxp.errorbar = TRUE,
   ylab = "Ki-67 Percent Positive Nuclei",
   palette = "Set1",
   xlab = "", na.rm = TRUE
)    +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    text=ggplot2::element_text(size=12, face="bold",color="#000000"),
    axis.text=ggplot2::element_text(color="#000000")
  )
  

```


## Variation of Ki67 across cores
We can also look at Ki67 percent positivity. Note this is a stricter comparison since we are looking at percent positivity and not categories.

```{r}
#| label: fig-ki67-across-cores-by-cohort
#| fig-cap: Boxplot of Ki67 percent positive scores (max-min) for the same patient (multiple cores) by cohort. No differences are seen across cohorts.
#| 
ggpubr::ggboxplot(
  brtma_core_by_patient, x = "cohort", y= "ki67_diffs",
  fill = "cohort",
  xlab="", ylab="Difference in percent positivity (Ki67)",
  add="jitter",
  palette = "Set1",
  bxp.errorbar = TRUE
) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank()
  ) +
  ggpubr::stat_compare_means()

```

```{r}
#| label: fig-ki67-across-cores
#| fig-cap: Boxplot of Ki67 percent positive scores (max-min) for the same patient (multiple cores) across all cohorts. 
#| 
ggpubr::ggboxplot(
  brtma_core_by_patient, x = 1, y= "ki67_diffs",fill="red",
  xlab="", ylab="Difference in percent positivity (Ki67)",
  add="jitter",
  palette = "Set1",
  bxp.errorbar = TRUE
) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.text.x = ggplot2::element_blank()
  ) 

```


We can also examine the number of cores/patient. Note that each stain may have failures, resulting in 0 cores for a specific stain for a specific patient or in the case of two patients, no viable cores.
```{r}
#| label: tbl-ki67-num-cores
#| tbl-cap: Summary of number of Ki67-stained cores per patient (by cohort). Note that some may have no cores, as these patients only have other stains successfully called. In the case of two patients (37, 167) there were no viable cores.

gtsummary::tbl_summary(
  brtma_core_by_patient, 
  include="ki67_number_of_cores",
  by="cohort",
  label = list(ki67_number_of_cores="Ki67 Cores/Patient")
) |>
  gtsummary::add_overall()
```




# HR/HER2 status
Finally, we can combine the Hormone Receptor status (ER or PR), with HER2 status. The HR/HER2 categorization is shown with respect to cohorts in @tbl-hrher2-summary. A stacked barplot of the proportions of each HR/HER2 category
are shown (by cohort) in @fig-hrher2-barplot. The comparison of the Clinical HR/HER2 calls vs. the TMA stain evaluation is shown in @tbl-clinical-hrher2-vs-tma . The Cohen's kappa for clinical vs. TMA evaluation indicates good agreement (see below).

**FIXME** There are a few samples (51 vs. 53 HF HR+/HER2- and 46 vs. 48 HPR HR+/HER2-) difference between code bases.

```{r}
vcd::Kappa(table(na.omit(data.frame(brtma$tnbc_category, brtma$`Clinical TNBC`))))
```

**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.



## Summary of HR/HER2 Status
```{r}
#| label: tbl-hrher2-summary
#| tbl-cap: Summary of HR/HER2 stain evaluation by cohort.

tnbc_summary_table <- gtsummary::tbl_summary(
  brtma, 
  by="cohort", 
  include="tnbc_category",
  label=list("tnbc_category"="HR/HER2 Cores"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_overall() |>
#|>
# NB: Needs larger workspace
  gtsummary::add_p(test=list(tnbc_category ~ "fisher.test"),
                   test.args = list("tnbc_category" ~ list(workspace=2e7))
  )

#tnbc_summary_table <- tnbc_summary_table |>
#  gtsummary::modify_footnote(
#    p.value =  sprintf("Fisher's exact test: statistic = %5.2f, degrees of freedom = %d",
#    pr_summary_table$table_body$statistic[[1]],
 #   pr_summary_table$table_body$parameter[[1]]
 #   )
#  )

     

tnbc_summary_table


```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  tnbc_summary_table, 
  file = here::here("delivery/tnbc_summary_table.xlsx")
)
gtsummary::as_flex_table(tnbc_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/tnbc_summary_table.docx"))
```

## Barplot of HR/HER2 Frequencies
```{r}
#| label: fig-hrher2-barplot
#| fig-cap: Barplot of frequencies of HR/HER2 status based on cohort.


p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  tidyr::drop_na(brtma, tnbc_category),
  ggplot2::aes(x=cohort,fill=tnbc_category)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  # Use RColorBrewer Set1 colors.
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::xlab("HR/HER2 Expression per Cohort") +
  ggplot2::labs(caption = "p = 0.004, Fisher's exact test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )

p


```


```{r}
png(file = here::here("delivery/tnbc_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/tnbc_summary_barplot.pdf"))
p
invisible(dev.off())
```

## Clinical HR/HER2 call vs TMA stain

```{r}
#| label: tbl-clinical-hrher2-vs-tma
#| tbl-cap: Comparison of derived Clinical HR/HER2 calls vs. TMA stain evaluations.

tnbc_vs_clinical_table <- brtma |>
  dplyr::filter(!is.na(tnbc_category), !is.na(`Clinical TNBC`))

tnbc_clinical_vs_tma <- gtsummary::tbl_summary(
  tnbc_vs_clinical_table,
  include = "tnbc_category",
  by = "Clinical TNBC",
  label = list("tnbc_category"="Individual Core HR/HER2 Result")
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cores with a Documented<br>Clinical HR/HER2 Result**"
  ) |>
  gtsummary::bold_labels() 


tnbc_clinical_vs_tma 
```
```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  pr_clinical_vs_tma , 
  file = here::here("delivery/pr_clinical_vs_tma.xlsx")
)
gtsummary::as_flex_table(pr_clinical_vs_tma ) |>
  flextable::save_as_docx(path=here::here("delivery/pr_clinical_vs_tma.docx"))
```

# PAM50


The ER categorization is shown with respect to cohorts in @tbl-er-summary. A stacked barplot of the proportions of each ER category
are shown (by cohort) in @fig-er-barplot. The comparison of the Clinical ER calls vs. the TMA stain evaluation is shown in @tbl-clinical-er-vs-tma. 



**NOTE** The figures and tables in this document are exported in
various formats in the `delivery` directory. For tables, excel and word versions are created; for figures, pdf and png files.




## Summary of PAM50
```{r}
#| label: tbl-pam50-summary
#| tbl-cap: Summary of PAM50 by cohort.
#| 

pam50 <- readRDS(here::here("data/pam50.rds"))
# Clean up the pam50 (remove missing) and make unique
# since multiple cores match to the same PAM50 call 
# (PAM50 is from RNAseq of bulk tumor, one measurement
# per patient).
pam50 <- pam50 |>
  dplyr::filter(!is.na(pam50_subtype)) |>
  dplyr::select(cohort, pam50_subtype, study_patient_id) |>
  dplyr::distinct() |>
  dplyr::mutate(cohort=forcats::fct_drop(cohort))
  
pam50_summary_table <- gtsummary::tbl_summary(
  pam50, 
  by="cohort", 
  include="pam50_subtype",
  label=list("pam50_subtype"="PAM50"),
  missing_text="Not Evaluable",
  percent="column"
) |>
  gtsummary::modify_header(label="") |>
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Cohort**"
  ) |>
  gtsummary::bold_labels() |>
  gtsummary::add_p() |>
  gtsummary::add_overall() 

pam50_summary_table |>
  gtsummary::as_gt() |>
  gt::tab_style(
    style = gt::cell_fill(color="lightgrey"), 
    locations=gt::cells_body(columns="stat_0")
  )

```

```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  pam50_summary_table, 
  file = here::here("delivery/pam50_summary_table.xlsx")
)
gtsummary::as_flex_table(pam50_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/pam50_summary_table.docx"))
```

## Barplot of PAM50 Frequencies
```{r}
#| label: fig-pam50-barplot
#| fig-cap: Barplot of frequencies of PAM50 based on cohort.

# I believe I got these (or tried to match these) from a publication.
pam50_colors <- c(
  "Luminal A"="#1f78b4",
  "Luminal B"="#a6cee3",
  "HER2-enriched"="#fb9a99", 
  "Normal-like"="#4daf4a", 
  "Basal-like"="#e41a1c"
)


p <- ggplot2::ggplot(
  # Drop NA values first, to avoid problems later.
  pam50,
  ggplot2::aes(x=cohort,fill=pam50_subtype)
) +
  # This is the actual code for stacked barplot. Note the reverse, which
  # gives us the appropriate ordering of categories.
  ggplot2::geom_bar(
    stat="count", 
    position=ggplot2::position_fill(reverse=TRUE), # Stack the percents (fill)
    color="black" # Outline the categories
  ) +
  # Convert to percentage y axis
  ggplot2::scale_y_continuous(name="",labels=scales::label_percent()) +
  ggplot2::scale_fill_manual(values = pam50_colors) +
  ggplot2::xlab("PAM50 per Cohort") +
  ggplot2::labs(caption = "p = 0.031, Fisher's exact test") +
  # ggpubr gives a clean theme
  ggpubr::theme_pubr() +
  # Add space to x axis (left bar) and limit y axis to 0-1 range 
  # (no additional space).
  ggplot2::coord_cartesian(xlim=c(0.5, NA), ylim=c(0,1), expand=FALSE) +
  # Finally, turn off parts of the graph (not needed).
  ggplot2::theme(
    legend.title=ggplot2::element_blank(),
    axis.line.x = ggplot2::element_blank(),
    axis.ticks.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_blank()
  )

p
```

```{r}
png(file = here::here("delivery/pam50_summary_barplot.png"))
p
invisible(dev.off())
pdf(file=here::here("delivery/pam50_summary_barplot.pdf"))
p
invisible(dev.off())
```


# PAM50 vs Subtypes
We can also view the PAM50 scores vs clinical subtypes independently for each cohort.
First we need to verify that the clinical status (HR/HER2) per patient is consistent. Not all cores are consistent (see `brtma_tnbc_mismatched`)

```{r}
#| label: tbl-brtma-tnbc-mismatched
#| tbl-cap: Study patient ID's with mismatched core tnbc calls.


# First calculate the mismatches (all are count of 2)
brtma_tnbc_mismatched <- brtma |>
  dplyr::select(cohort, study_patient_id, tnbc_category) |>
  dplyr::filter(!is.na(tnbc_category)) |>
  dplyr::distinct() |>
  dplyr::group_by(study_patient_id) |>
  dplyr::summarize(n = dplyr::n()) |>
  dplyr::filter(n>1) 

gt::gt(brtma_tnbc_mismatched)

# Then extract from brtma the non-duplicate patient-level details of tnbc
nodups_brtma <- brtma |>
  dplyr::filter(!is.na(tnbc_category)) |>
  dplyr::filter(!study_patient_id %in% brtma_tnbc_mismatched$study_patient_id) |>
  dplyr::select(study_patient_id, tnbc_category) |>
  dplyr::distinct()

# Finally, create a pam50 based on nodups and having a pam50 score.
pam50 <- readRDS(here::here("data/pam50.rds"))


# Clean up the pam50 (remove missing) and make unique
# since multiple cores match to the same PAM50 call 
# (PAM50 is from RNAseq of bulk tumor, one measurement
# per patient).
pam50 <- pam50 |>
  dplyr::filter(!is.na(pam50_subtype)) |>
  dplyr::filter(!study_patient_id %in% brtma_tnbc_mismatched$study_patient_id) |>
  dplyr::select(cohort, pam50_subtype, study_patient_id) |>
  dplyr::distinct() |>
  dplyr::mutate(cohort=forcats::fct_drop(cohort)) |>
  dplyr::inner_join(
    nodups_brtma,
    by=c("study_patient_id"="study_patient_id"),
    relationship="one-to-one"
  )  
```


```{r}
#| label: tbl-pam50-tnbc-cohort-summaries
#| tbl-cap: Summary of PAM50  types by HR/HER2 status with cohort as separate table.
#| 


# For each cohort, generate the table.
pam50_summary_tables <- purrr::map(levels(pam50$cohort), \(.cohort) {
  tbl_hdr <- glue::glue("**{.cohort}**")
  gtsummary::tbl_summary(
    dplyr::filter(pam50, cohort ==  .cohort),
    by="tnbc_category", 
    include="pam50_subtype",
    label=list("pam50_subtype"="PAM50"),
    missing_text="Not Evaluable",
    percent="column"
  ) |>
    gtsummary::modify_header(label="") |>
    gtsummary::modify_spanning_header(
      gtsummary::all_stat_cols() ~ tbl_hdr
    ) |>
    gtsummary::bold_labels() |>
    gtsummary::add_p() |>
    gtsummary::add_overall()
  
})


```

```{r}

pam50_summary_tables[[1]]
pam50_summary_tables[[2]]
pam50_summary_tables[[3]]

```
Combined table
```{r}
#| label: tbl-pam50-tnbc-cohort-summary
#| tbl-cap: Summary of PAM50  types by HR/HER2 status and cohort.
#| 
pam50_summary_table <- gtsummary::tbl_strata(
  pam50,
  strata = tnbc_category,
  .tbl_fun = \(.x) {
    gtsummary::tbl_summary(.x, by = "cohort",include="pam50_subtype",percent="column") |>   
      gtsummary::add_p()
  }
) 
pam50_summary_table
```

```{r}
# Export as tables for manuscript
gtsummary::as_hux_xlsx(
  pam50_summary_table, 
  file = here::here("delivery/pam50_summary_table_hrher2.xlsx")
)
gtsummary::as_flex_table(pam50_summary_table) |>
  flextable::save_as_docx(path=here::here("delivery/pam50_summary_table_hrher2.docx"))
```

# PAM50 vs. Ki67
Similarly, we can look at Ki67 scores (positivity) compared to PAM50 subtypes (by cohort). Here we look at percent positive. Since there are multiple cores per patient, we collapse to the maximum Ki67 score observed.

```{r}
# Then extract from brtma the non-duplicate patient-level details of tnbc
maxki67_brtma <- brtma |>
  dplyr::filter(!is.na(ki67_percent_positive)) |>
  dplyr::group_by(study_patient_id) |>
  dplyr::slice_max(order_by=ki67_percent_positive,n=1) |>
  dplyr::select(study_patient_id, ki67_percent_positive) |>
  dplyr::distinct()

# Finally, create a pam50 based on ki67 entries
pam50 <- readRDS(here::here("data/pam50.rds"))


# Clean up the pam50 (remove missing) and make unique
# since multiple cores match to the same PAM50 call 
# (PAM50 is from RNAseq of bulk tumor, one measurement
# per patient).
pam50 <- pam50 |>
  dplyr::filter(
    !is.na(pam50_subtype)
  ) |>
  dplyr::select(cohort, pam50_subtype, study_patient_id) |>
  dplyr::distinct() |>
  dplyr::mutate(cohort=forcats::fct_drop(cohort)) |>
  dplyr::inner_join(
    maxki67_brtma,
    by=c("study_patient_id"="study_patient_id"),
    relationship="one-to-one"
  ) 

```

Now we can make a boxplot of the percent positive Ki67.

```{r}


ggpubr::ggboxplot(
  pam50,
  x = "pam50_subtype",
  y = "ki67_percent_positive",
  fill="cohort",
  bxp.errorbar = TRUE,
  ylab = "Ki-67 Percent Positive Nuclei",
  palette = "Set1",
  xlab = "", 
  na.rm = TRUE
) +
  ggplot2::theme(
    #legend.position="none",
    legend.title = ggplot2::element_blank(),
    text=ggplot2::element_text(size=12, face="bold",color="#000000"),
    axis.text=ggplot2::element_text(color="#000000")
  ) 

```
